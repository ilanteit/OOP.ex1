מטלה 1-
מטרת המטלה היא ליצור מחלקת גרף אשר יוצרת גרף ממושקל ומקיימת את תכונות הגרף הממשוקל כמו: הוספה או מחיקה של קודקודים, הוספה או מחיקה של צלעות בין קודקודים במידה וקיים צלע.
בנוסף לתכונות הגרף המחלקה צריכה לממש גם את תוכנות הקודקודים.
לאחר שיצרנו גרף ממושקל נהייה צריך ליצור מחלקה אשר יכולה לעשות פעולות על גרף כמו: העתקה מלאה של הגרף, בדיקה של הדרך הכי קצרה בין 2 קודקודים ועוד.

Nodeinfo:
המחלקה הראשונה במטלה היא מחלקת Nodeinfo שהיא מחלקת הקודקודים שלנו אשר מכילה את תכונות הקודקוד.
בכל קודקוד יש מידע שמאוסן בתוכו למשל :לכל קודקוד יש מפתח יחודי(key- מספר), יש תגית(tag - הורה) ומידע מילולי)(info) ומשקל (weight).
בnode_info קימות 2 מפות האש מאפ - שתי המפות מכילות תכונות שונות של קודקוד, הן לא מקושרות אחת לשנייה אך הן מביאות מידע שונה בנוגע לאותו "מפתח" :
1.neighbor - מפה של כל השכנים.
2.edges - מפה של כל המשקלים שיש לכל קודקוד.
נרצה להשתמש בתכונות הקודקוד והמפות של node_info  בWGraph_DS ולכן נגדיר את Nodeinfo בתור מחלקה פנימית של WGraph_DS כך שמחלקת הגרף תוכל להשתמש במחלקת Nodeinfo  כמחלקה פרטית שלה ולא יהייה ניתן לשנות אותה.


WGraph_DS:
המחלקה השנייה היא מחלקת WGraph_DS שמטרתה העיקרי היא ליצור גרף ממושקל עם פעולות שניתן לבצע על הגרף כמו:
public boolean hasEdge(int node1, int node2) - פונקציה הבודקת עם קיים צלע בין 2 קודקודים
public double getEdge(int node1, int node2) - פונקציה המחזירה את המשקל שיש בין 2 קודקודים 
 public void addNode(int key) - פונקציה שמקבלת מפתח ומוסיפה קודקוד עם פתח זה לגרף
public void connect(int node1, int node2, double w) - פונקציה המחברת 2 קודקוודים ומביאה להם את המשקל שבינהם.
public node_info removeNode(int key) - פונקציה שמוחקת קודקוד מהגרף ואז מוחקת את כל הצלעות הקשורות לקודקוד זה
public void removeEdge(int node1, int node2) - פונקציה המוחקת את הצלע בין 2 הקודקודים אם קיימת צלע.

פעולות אלו שהגרדתי היה ניתן לבצע רק על ידי מניפולציות של המפות שהגדרתי ב Nodeinfo והמפה "vertices" שאותה הגדרתי בתוך WGraph_DS.
ההאש מאפ "vertices" מטרתה להיות המפה של כל הקודקודים בגרף - כלומר המפה vertices היא הגרף בעצמו.
המפה של vertices קשורה לneighbor וגם ל- edges כך לשכל קודקוד שיש בvertices יש גם רשימה של כל השכנים שלו במידה ויש, על ידי מפת הneighbor וגם לכל קודקוד שיש לו צלע עם קודקוד אחר יש את המשקל לפי מפת הedges.  


WGraph_Algo:
כעת החלק העיקרי של המטלה והיא פעולות שניתן לבצע על גרף ממשוקל.
נגדיר תחילה גרף ממושקל שאותו אנחנו יוצרים ממחלקת WGraph_DS .
ונגדיר 2 מפות האש מאפ חדשות :
1.visited - האש מאפ שמקבלת מפתח ומחזירה true or false אם ביקרו בא או לא
2. distance - האש מאפ של המרחקים בין הקודקוד ההתחלתי לשאר הקודקודים. (בהתחלה המרחקים של כל הקודקודים מהקודקוד ההתחתי הוא אינסוף והמרחק של הקודקוד ההתחלתי עם עצמו הוא 0)
הפעולות שניתן לבצע הן:
 public void init(weighted_graph g - פונקציה אשר מאתחלת את הגרף להיות "נקי" - המטרה לפעולה זאת היא שאם נרצה לבצע על אותו גרף מספר פעולות שונות  נרצה כל פעם לאתחל אותו למצב ההתחלתי שלו.
 
public weighted_graph copy() - פונקציה אשר יוצרת גרף חדש על ידי העתקה העמוקה של כל התכונות של כל המפות האש מאפ של הקודקודים .

private void Dijkstra(weighted_graph g, int src)-  פונקציה אשר מקבלת גרף וקודקוד התחלתי וממלאת  מידע חדש על הגרף .
המידע שהגרף קיבל הוא - הדרך הממושקלת הכי קצרה מהקודקוד שהפונקציה קיבלה לכל קודקוד אחר בגרף במידה והוא מחובר אל הקודקוד הראשון בדרך מסויימת.
הפונקציה עוברת קודקוד קודקוד ומסמנת בהאש מאפ "visited" את הקודקודים שעברו עליהם כדי שלא יהייה מחזוריות ובנוסף ההאש מאפ "distance" מתעדכנת במקביל במרחק של הקודקוד ההתחלתי לשכן שלו , בנוסף לעידכון 2 המפות הtag של כל קודקוד מתעדכן להיות הparent שלו.
במידה ועבר על הגרף ניתן להסיק מספר דברים :
1.האם הגרף מלא ואפשר להגיע מכל קודקוד לקודקוד אחר או לא. במידה והמפה של visited מכילה לפחות false אחד זאת אומרת שלא ביקרנו בכל הקודקודים והגרף לא מלא.
2.את הדרך הכי קצרה מהקודקוד ההתחלתי לכל קודקוד אחר שמחובר אליו על ידי מפת ה"distance" שאמורה להכיל את המרחק הממשוקל המינימלי במידה וקיים מסלול כזה.



public boolean isConnected()- פונצקיה הבודקת אם הגרף מלא ואפשר להגיע מכל קודקוד לכל קודקוד בגרף. פונצקיה זאת משתמש בדיאקסטרה על ידי לבדוק אם המפה המעודכנת של "visited" מלאה בערכים של true לכל הקודקודים , במידה ואםילו ערך אחד הוא flase אזי הגרף לא מלא.

 public List<node_info> shortestPath(int src, int dest) - פונציקה המקבלת 2 קודקודים ומחזירה רשימה של המסלול הממושקל הקצר ביותר בינהם אם קיים. גם בפונקציה זאת נשתמש בדיאקסטרה בשביל לעדכן את המרחקים שיש בין הקודקוד הראשון לקודקוד שאליו נרצה להגיע.
לאחר שהופעל דיאקסטרה על הגרף אם יש מסלול בין src ל dest אזי  הtag של dest אמור להתעדכן באב שלו וגם הtag של האב שלו גם מתעדכן עד שנגיע רקורסיבית לsrc  וגם הdistance שיש בין src ל dest מתעדכן להיות הקצר ביותר.
במידה והtag של dest הינו -1 אפשר להסיק שהאלגוריתם של דיאקסטרה לא הגיע לdest  ולכן לא שינה את האב שלו כלומר אין מסלול בין src ל dest. 

public double shortestPathDist(int src, int dest)- פונציה שמחזירה את המשקל של המסלול בין src ל dest .




 


 

 



 
